FORMAT: 1A
HOST: https://api.teamleader.eu

# Teamleader API

#### WARNING - This is still a BETA version.

This documentation is already published, but it is still under BETA.
Most of the endpoints might already work, but we do NOT guarantee they will not change before our final release.


## AP-What?

An API is a Application **Programming** Interface.

It is used by **programmers**, **developers** or **engineers** to programmaticaly interact with Teamleader,
to integrate it with other software tools or to customize Teamleader in a certain way.
If you are not a programmer, developer or engineer, this might be hard for you.

If you have the needs to integrate Teamleader with other tools, or to customize its behavior,
someone else might already made and published it on our **[marketplace](https://marketplace.teamleader.eu)**.
If you still want to do something custom, we advise you to look for a programmer to help you out or to contact someone in our [partner](https://www.teamleader.eu) network.



## General principles

### RPC

We provide an RPC-API, with which you can do actions related to a domain concept.

```
POST https://api.teamleader.eu/someConcept.someAction?some_parameter=some_value HTTP/1.1

```

_In this example we perform the `someAction` action on `someConcept` with the parameter `some_parameter` that has a value of `some_value`._

We chose this approach over the more popular REST, because it enables us to name our actions better, like `invoices.book`, `timetracking.start`, `timetracking.stop`.
We honestly think that for more complex subdomains this really enriches our API, while for some simpler subdomains it is only a subtle difference.


### GET vs. POST

When retrieving data through HTTP, you normally use the GET method.
To make changes to data, you often use the POST method.

We tend to follow that principle, but we're giving you the opportunity to POST your GETs,
to make it a little simpler to construct more advanced queries.
For us following examples are equally:

```
GET https://api.teamleader.eu/invoices.find?filter[department_id]=1&page[number]=3&page[size]=50&company_id=1234
```

```
POST https://api.teamleader.eu/invoices.find

{
    "filter" : {
        "department_id" : 1
    },
    "page" :  {
        "size" : 50,
        "number" : 3
    },
    "company_id" : 1234
}
```

### Collections and metadata

We plan to add more meta data to responses over time.
To be able to do that on collections too, we wrap every collection in an object with the items in an array called `_items`.

```json
{
    "_items" : [
        { "foo" : "bar" },
        { "foo" : "baz" },
        { "foo" : "boo" },
    ],
    "_some_future_meta_data" : {
        "meta" : "data"
    }
}
```

Yes, it feels weird in the beginning, but you'll get used to it very soon!
We think that ensuring backward compatibility in the future, will help you more in the end.

## OAuth 2

OAuth 2 is an authorization framework that lets your integration request authorization to data in a user's Teamleader account without getting their password.

Before starting you will need to register your integration. Each registered integration is assigned a unique `client_id` and `client_secret` which will be used in the OAuth flow. Note that the `client_secret` key should not be shared.

### Authorization

Redirect users to the Teamleader authorization page:

`https://app.teamleader.eu/oauth2/authorize`

The following values should be passed as GET parameters:
 - `client_id` - issued when you create your integration
 - `response_type` - must be "code"
 - `state` - unique string to be passed back upon completion (optional)
 - `redirect_uri` - URL to redirect back to after authorization

If the user denies your request, we will redirect back to the `redirect_uri` with an `error` parameter:

`https://YOUR_REDIRECT_URI?error=access_denied`

### Token issuing

If the user authorizes your integration, Teamleader will redirect back to the previously specified `redirect_uri` with a temporary authorization code and the original state parameter if it was provided. If the states don't match, the request may have been created by a third party and you should abort the process.

`https://YOUR_REDIRECT_URI?code=CODE&state=STATE`

Your server can exchange this authorization code for an access token. Note that authorization codes may only be exchanged once and expire 10 minutes after issuance.

`https://app.teamleader.eu/oauth2/access_token`

The following values should be passed as POST parameters:
 - `client_id` - issued when you register your integration
 - `client_secret` - issued when you register your integration
 - `code` - the authorization code
 - `grant_type` - must be "authorization_code"
 - `redirect_uri` - the original submitted redirect URL

You will receive a JSON response containing an `access_token` and `refresh_token`:

```
{
    "token_type": "Bearer",
    "expires_in": 3600,
    "access_token": ACCESS_TOKEN,
    "refresh_token": REFRESH_TOKEN
}
```

You can use this access token to call API methods on behalf of the user using the Authorization-header. Example:

```
GET https://api.teamleader.eu/contacts.list HTTP/1.1
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciO...
Accept: application/json
```

The access token will continue functioning until the installing user either revokes the token and/or uninstalls your integration.

### Refresh tokens

Access tokens expire shortly (1 hour) after they are issued for security reasons. If your integration needs to communicate with the API beyond the access token's lifespan you will need to request a new access token using the refresh token which was issued with the access token. Note that refresh tokens can only used once to get a new access token and refresh token.

`https://app.teamleader.eu/oauth2/access_token`

The following values should be passed as POST parameters:
 - `client_id` - issued when you register your integration
 - `client_secret` - issued when you register your integration
 - `refresh_token` - the refresh token
 - `grant_type` - must be "refresh_token"

### User Identity

To retrieve information about the user who authorized your application (the resource owner), you can call the following endpoint:

`https://app.teamleader.eu/api/account/me`

## General [/]

### users.list [GET /users.list]

Get a list of all users

+ Response 200 (application/json)

    + Attributes (object)
        + data (array[User])

### departments.list [GET /departments.list]

Get a list of all departments

+ Response 200 (application/json)

    + Attributes (object)
        + data (array[Department])

### tags.list [GET /tags.list]

Get a list of all tags

+ Response 200 (application/json)

    + Attributes (object)
        + data: expo, upsell (array[string])

## Calendar entries [/calendar-entries]

### calendarEntries.list [GET /calendarEntries.list]

Search calendar entries

+ Request (application/json)

    + Attributes (object)
        + filter (object, required)
            + employee_id: `1` (number, required) - Use this to filter by employee
            + start_date: `2017-01-01` (string, required) - Format ISO 8601: yyyy-mm-dd
            + end_date: `2017-01-01` (string, required) - Format ISO 8601: yyyy-mm-dd

+ Response 200 (application/json)

    + Attributes (object)
        + _items (array)
            + (object)
                + id: `123` (number)
                + name: `Erlich Bachman's birthday` (string)
                + date: `2017-05-16` (string)
                + duration: `140` (number)

## Contacts [/contacts]

### contacts.list [GET /contacts.list]

Get a paginated list of contacts

+ Request (application/json)

    + Attributes (object)
        + filter (object, optional)
            + company_id: `1` (number, optional) - Filter contacts by a certain company.
            + updated_since: `2017-04-26T10:01:49+00:00` (string, optional) - ISO 8601 date. Teamleader will only return contacts that have been added or modified since that time (inclusive).
        + page (object, optional)
            + size: `20` (number, optional) - Amount of contacts you want returned, 1 to 100.
                + Default: `20`
            + number: `1` (number, optional) - The numerated page you want, starts at 1.
                + Default: `1`

+ Response 200 (application/json)

    + Attributes (object)
        + data (array[Contact])

### contacts.info [GET /contacts.info]

Get the details for a single contact

+ Request (application/json)

    + Attributes (object)
        + `contact_id`: `1` (number, required)

+ Response 200 (application/json)

    + Attributes (object)
        + data (ContactDetail)

### contacts.add [POST /contacts.create]

Add a contact to Teamleader

+ Request (application/json)

    + Attributes (object)
        + first_name: `John` (string, required) - The first name of the new contact
        + last_name: `Smith` (string, required) - The last name of the new contact
        + email: `john@example.com` (string, required) - The email address of the new contact
        + salutation: `Mr` (string, optional)
        + email: `john@example.com` (string, required) - The email address of the new contact
        + phone: `1234567` (string, optional)
        + mobile: `7654321` (string, optional)
        + fax: `7654321` (string, optional)
        + website: `http://example.com` (string, optional)
        + address (Address, optional)
        + delivery_address (Addressee, optional)
        + visiting_address (Addressee, optional)
        + invoice_address (Addressee, optional)
        + language: `EN` (string, optional) - Language code according to ISO 639-1. For Dutch: "NL"
        + gender: `M` (enum[string], optional)
            + Members
                + M
                + F
                + U
        + birthdate: `1989-08-19` (string, optional)
        + remarks: `Met at expo` (string, optional) - Background information on the contact
        + tags: expo, upsell (array[string], optional) - Pass one or more tags. Existing tags will be reused, other tags will be automatically created for you.

+ Response 201 (application/json)

    + Attributes
        + data (object)
            + id: `1` (number)

### contacts.update [POST /contacts.update]

Update a Teamleader contact

+ Request (application/json)

    + Attributes (object)
        + contact_id: `1` (number, required) - The ID of the contact you want to update
        + first_name: `John` (string) - The given name of the new contact
        + last_name: `Smith` (string) - The last name of the new contact
        + salutation: `Mr` (string, optional)
        + email: `john@example.com` (string, required) - The email address of the new contact
        + phone: `1234567` (string, optional)
        + mobile: `7654321` (string, optional)
        + fax: `7654321` (string, optional)
        + website: `http://example.com` (string, optional)
        + address (Address, optional)
        + delivery_address (Addressee, optional)
        + visiting_address (Addressee, optional)
        + invoice_address (Addressee, optional)
        + language: `EN` (string, optional) - Language code according to ISO 639-1. For Dutch: "NL"
        + gender: `M` (enum[string], optional)
            + Members
                + M
                + F
                + U
        + birthdate: `1989-08-19` (string, optional)
        + remarks: `Met at expo` (string, optional) - Background information on the contact
        + tags: expo, upsell (array[string], optional) - Pass one or more tags. Existing tags will be reused, other tags will be automatically created for you.

+ Response 204

### contacts.delete [POST /contacts.delete]

Delete a contact from Teamleader

+ Request (application/json)

    + Attributes (object)
        + contact_id: `1` (number, required) - The account ID of the contact you wish to delete

+ Response 204

### contacts.tag [POST /contacts.tag]

Add a tag to a contact

+ Request (application/json)

    + Attributes (object)
        + contact_id: `123` (number, required) - The ID of a contact
        + tags: prospect, expo (array[string], required) - A list of tags to add

+ Response 204

### contacts.untag [POST /contacts.untag]

Remove a tag from a contact

+ Request (application/json)

    + Attributes (object)
        + contact_id: `123` (number, required) - The ID of a contact
        + tags: prospect, expo (array[string], required) - A list of tags to remove

+ Response 204

### contacts.linkToCompany [POST /contacts.linkToCompany]

Linking a contact to a company

+ Request (application/json)

    + Attributes (object)
        + contact_id: `123` (number, required) - The ID of a contact
        + company_id: `5` (number, required) - The ID of a company

+ Response 204

### contacts.unlinkFromCompany [POST /contacts.unlinkFromCompany]

Unlinking a contact from a company

+ Request (application/json)

    + Attributes (object)
        + contact_id: `123` (number, required) - The ID of a contact
        + company_id: `5` (number, required) - The ID of a company

+ Response 204

## Companies [/companies]

### companies.list [GET /companies.list]

Search companies

+ Request (application/json)

    + Attributes (object)
        + filter (object, optional)
            + tag: `upsell` (string, optional) - Company tag. Teamleader will only return companies that have the tag.
            + updated_since: `2017-04-26T10:01:49+00:00` (string, optional) - ISO 8601 date. Teamleader will only return contacts that have been added or modified since that time (inclusive).
            + term: `teamleader` (string, optional) - A search string. Teamleader will try to match each part of the string to the first name, last name, company name and email address.
        + page (object, optional)
            + size: `20` (number, optional) - The amount of contacts returned per request, max 1 to 100
                + Default: `20`
            + number: `1` (number, optional) - The current page, the first page is 1
                + Default: `1`

+ Response 200 (application/json)

    + Attributes (object)
        + data (array[Company])

### companies.info [GET /companies.info]

Get company info

+ Request (application/json)

    + Attributes (object)
        + company_id: 123 (number)

+ Response 200 (application/json)

    + Attributes (object)
        + data (CompanyDetail)

### companies.add [POST /companies.create]

Add a Teamleader company

+ Request (application/json)

    + Attributes (object)
        + name: `Pied Piper` (string, required)
        + business_type: `NV` (string, optional) - containing the company type (eg NV, BVBA,..)
        + vat_number: `BE0899623035` (string, optional)
        + local_business_number: `63326426` (string, optional) - the local business number (KVK in the Netherlands)
        + email: `john@example.com` (string, required) - The email address of the new contact
        + invoice_email: `invoicing@example.com` (string, optional)
        + phone: `1234567` (string, optional)
        + fax: `7654321` (string, optional)
        + website: `http://example.com` (string, optional)
        + address (Address, optional)
        + delivery_address (Addressee, optional)
        + visiting_address (Addressee, optional)
        + invoice_address (Addressee, optional)
        + iban: `BE12 1234 1234 1234` (string)
        + bic: `BICBANK` (string)
        + language: `EN` (string, optional) - Language code according to ISO 639-1. For Dutch: "NL"
        + remarks: `Met at expo` (string, optional) - Background information on the contact
        + tags: expo, upsell (array[string], optional) - Pass one or more tags. Existing tags will be reused, new tags will be automatically created for you.

+ Response 201 (application/json)

    + Attributes
        + data (object)
            + id: `1` (number)

### companies.update [POST /companies.update]

Update a Teamleader company

+ Request (application/json)

    + Attributes (object)
        + company_id: `1` (number, required) - The ID of the contact you want to update
        + name: `1` (string, required)
        + email: `john@example.com` (string, required) - The email address of the new contact
        + vat_number: `BE0899623035` (string, optional)
        + phone: `1234567` (string, optional)
        + fax: `7654321` (string, optional)
        + address (Address, optional)
        + invoice_email: `invoicing@example.com` (string, optional)
        + website: `http://example.com` (string, optional)
        + remarks: `Met at expo` (string, optional) - Background information on the contact
        + account_manager_id: `1` (number, optional)
        + local_business_number: `63326426` (string, optional) - the local business number (KVK in the Netherlands)
        + business_type: `NV` (string, optional) - containing the company type (eg NV, BVBA,..)
        + language: `EN` (string, optional) - Language code according to ISO 639-1. For Dutch: "NL"
        + tags: expo, upsell (array[string], optional) - Pass one or more tags. Existing tags will be reused, new tags will be automatically created for you.

+ Response 204

### companies.delete [POST /companies.delete]

Delete a company from Teamleader

+ Request (application/json)

    + Attributes (object)
        + company_id: `1` (number, required) - The account ID of the company you wish to delete

+ Response 204

### companies.tag [POST /companies.tag]

Add a tag to a company

+ Request (application/json)

    + Attributes (object)
        + company_id: `123` (number, required) - The ID of a company
        + tags: prospect, expo (array[string], required) - A list of tags to add

+ Response 204

### companies.untag [POST /companies.untag]

Remove a tag from a company

+ Request (application/json)

    + Attributes (object)
        + company_id: `123` (number, required) - The ID of a company
        + tags: prospect, expo (array[string], required) - A list of tags to remove

+ Response 204

### companyTypes.list [GET /companyTypes.list]

Get the names of business types (legal structures) a company can have within a certain country.

+ Request (application/json)

    + Attributes (object)
        + country: `BE` (string) -  country code according to ISO 3166-1 alpha-2. For Belgium: "BE"

+ Response 200 (application/json)

    + Attributes (object)
        + data (array[CompanyType])

## Deals [/deals]

### deals.list [GET /deals.list]

Get a list of all deals

+ Request (application/json)

    + Attributes (object)
        + page (object, optional)
            + size: `10` (number, optional) - Amount of results you want
                + Default: `20`
            + number: `1` (number, optional) - Page of results you want
                + Default: `1`
        + filter (object, optional)
            + term: `Teamleader` (string, optional) - A search string. Teamleader will try to search deals matching this string.
            + phase_id: `5` (number, optional) - Only return deals with this phase ID
            + company_id: `123` (number, optional) - Only return deals for this company
            + contact_id: `456` (number, optional) - Only return deals for this contact
            + project_id: `789` (number, optional) - Only return deals for this project

+ Response 200 (application/json)

    + Attributes (object)
        + data (array[Deal])

### deals.info [GET /deals.info{?include}]

Get deal details

+ Request (application/json)

    + Parameters
        + include: `quotation,phaseChanges` (string, optional) - Comma separated string with additional data you wish to include

    + Attributes (object)
        + deal_id: `1` (number, required) - ID of the deal you want

+ Response 200 (application/json)

    + Attributes (object)
        + data (DealDetail)

### deals.create [POST /deals.create]

Create a deal for a contact or company.

+ Request (application/json)

    + Attributes (object)
        + contact_or_company: `company` (enum[string], required) - Who is related to this deal?
            + Members
                + company
                + contact
        + contact_or_company_id: `1` (number, required) - ID of the related contact or company
        + title: `Interesting business deal` (string, required)
        + source: `Google Adwords` (string, required)
        + custom_field_ID: `1` (number, optional) - replace ID by the ID of your custom field.
        + sys_department_id: `1` (number, optional) - ID of the department the deal will be added to
        + responsible_sys_client_id: `1` (number, optional) - ID of the user that is responsible for this deal
        + phase_id: `1` (number, optional) - Phase ID of the initial deal phase
        + description: `1` (string, optional) - If this parameter is filled out a quotation (PDF) is generated by Teamleader using the text provided and the items. The PDF is accessible via the web interface.
        + budget_estimation: `10` (number, optional) - budget estimation for this deal. This value will be overwritten once a quotation is made for this deal
        + optional_contact_id: `1` (number, optional) - if this deal is related to a company, you can specify the ID of a related contact within that company via this parameter
        + filter_double_sales: `0` (number, optional) - if set to 1, an extra check added to make sure the deal isn't a double of the previous one.'

+ Response 201 (application/json)

    + Attributes
        + data (object)
            + id: `1` (number)

### deals.update [POST /deals.update]

Update a deal.

+ Request (application/json)

    + Attributes (object)
        + deal_id: `1` (number, required) - Who is related to this deal?
        + title: `Interesting business deal` (string, optional)
        + source: `Google Adwords` (string, optional)
        + responsible_sys_client_id: `1` (number, optional) - ID of the user that is responsible for this deal
        + budget_estimation: `10` (number, optional) - budget estimation for this deal. This value will be overwritten once a quotation is made for this deal
        + custom_field_ID: `1` (number, optional) - replace ID by the ID of your custom field.

+ Response 204

### deals.changePhase [POST /deals.changePhase]

Move a deal to a new phase.

+ Request (application/json)

    + Attributes (object)
        + deal_id: `1` (number, required) - Who is related to this deal?
        + phase_id: `1` (number, optional) - new phase ID this deal should be moved to

+ Response 204

### deals.quotations.add [POST /deals.quotations.add]

Add a quotation to a deal

+ Request (application/json)

    + Attributes (object)
        + deal_id: `1` (number, required) - Who is related to this deal?
        + items (array[object])
            + (object)
                + description: `Search module` (string, required)
                + price: `5` (number, required)
                + amount: `1` (number, required)
                + vat: `21` (string, required) - The vat tariff for this line
                + product_id: `1` (number, optional) - ID of the product
                + account: `1` (number, optional) - ID of the bookkeeping account
                + subtitle: `Enable search` (string, optional)

+ Response 204

+ Response 400

        A quotation can only be added once

### deals.quotations.update [POST /deals.quotations.update]

Update a deal quotation's items

+ Request (application/json)

    + Attributes (object)
        + deal_id: `1` (number, required) - Who is related to this deal?
        + items (array[object]) - Replaces a deals previous items
            + (object)
                + description: `Search module` (string, required)
                + price: `5` (number, required)
                + amount: `1` (number, required)
                + vat: `21` (string, required) - The vat tariff for this line
                + product_id: `1` (number, optional) - ID of the product
                + account: `1` (number, optional) - ID of the bookkeeping account
                + subtitle: `Enable search` (string, optional)

+ Response 204

### deals.quotations.send [POST /deals.quotations.emailToClient]

Send a deal's quotation via email to a client

+ Request (application/json)

    + Attributes (object)
        + sale_id: `1` (number, required) - ID of the deal
        + email: `john@example.com` (string, required) - Email of the client
        + subject: `1` (number, required) - Subject of the email
        + message: `1` (number, required) -  Add <link> to the message to print out the InvoiceCloud link. (not required when using an email template, leave empty or discard from request when using template_id)
        + template_id: `1` (number, optional) - ID of the email message created in Teamleader.

+ Response 204

### dealPhases.list [GET /dealPhases.list]

Get a list of all phases a deal can go through

+ Response 200 (application/json)

    + Attributes (object)
        + data (array)
            + (object)
                + id: 1 (number)
                + name: `New` (string)

### dealSources.list [GET /dealSources.list]

Get a list of all deal sources

+ Response 200 (application/json)

    + Attributes (object)
        + data (array)
            + (object)
                + id: 1 (number)
                + name: `Google Search` (string)

## Meetings [/meetings]

### meetings.delete [POST /meetings.delete]

Delete a meeting from Teamleader

+ Request (application/json)

    + Attributes (object)
        + meeting_id: `1` (number, required) - The ID of the meeting you wish to delete

+ Response 204

## Webhooks [/webhooks]

### /webhooks.register [POST /webhooks.register]

Register a webhook.

+ Request (application/json)

    + Attributes (object)
        + url: `https://www.mywebhookurl.com` (string, required) - Your webhook url
        + types: `["CONTACT_ADDED", "CONTACT_EDITED"]` (array[enum[string]], required) - Array of event types that should fire the webhook
            + Members
                + CONTACT_ADDED
                + CONTACT_EDITED
                + CONTACT_DELETED
                + COMPANY_ADDED
                + COMPANY_EDITED
                + COMPANY_DELETED
                + RELATED_CONTACTS_UPDATED
                + SALE_ADDED
                + SALE_QUOTATION
                + SALE_PHASE_CHANGED
                + SALE_ACCEPTED
                + SALE_REFUSED
                + SALE_DELETED
                + MEETING_ADDED
                + MEETING_EDITED
                + MEETING_CANCELLED
                + TASK_ADDED
                + TASK_EDITED
                + TASK_FINISHED
                + TASK_DELETED
                + TIMETRACKING_ADDED
                + TIMETRACKING_EDITED
                + TIMETRACKING_DELETED
                + INVOICE_ADDED
                + INVOICE_UPDATED
                + INVOICE_SENT
                + INVOICE_PAID
                + INVOICE_NOT_PAID
                + INVOICE_DELETED
                + CREDITNOTE_ADDED
                + CREDITNOTE_UPDATED
                + CREDITNOTE_SENT
                + CREDITNOTE_DELETED
                + PRODUCT_ADDED
                + PRODUCT_EDITED
                + PRODUCT_DELETED
                + PROJECT_ADDED
                + PROJECT_EDITED
                + PROJECT_DELETED
                + MILESTONE_ADDED
                + MILESTONE_EDITED
                + MILESTONE_CLOSED
                + MILESTONE_DELETED
                + TICKET_ADDED
                + TICKET_EDITED
                + TICKET_NEW_MESSAGE
                + TICKET_CLOSED
                + FILE_ADDED
                + FILE_EDITED
                + FILE_DELETED
                + CUSTOM_FIELD_ADDED
                + CUSTOM_FIELD_EDITED
                + CUSTOM_FIELD_DELETED
                + USER_DAYS_OFF_EDITED
                + COMPANY_CLOSING_DAYS_EDITED

+ Response 204

# Data Structures

## Address (object)
+ street: `Newell Road` (string)
+ number: `5230` (string)
+ zipcode: `94020` (string)
+ city: `Palo Alto` (string)
+ country: `US` (string)

## Addressee (object)
+ addressee: `Pied Piper Finance Dep.` (string, optional)
+ street: `Newell Road` (string)
+ number: `5230` (string)
+ zipcode: `94020` (string)
+ city: `Palo Alto` (string)
+ country: `US` (string)

## Company (object)
+ id: `123` (number)
+ name: `Pied Piper` (string)
+ business_type: `NV` (string)
+ vat_number: `BE0899623035` (string)
+ local_business_number: `63326426` (string)
+ email: `info@piedpiper.eu` (string)
+ invoice_email: `invoicing@example.com` (string, optional)
+ phone: `092980615` (string)
+ fax: `091234567` (string)
+ website: `https://piedpiper.com` (string)
+ address (Address)
+ iban: `BE12123412341234` (string)
+ bic: `BICBANK` (string)
+ language: `NL` (string)
+ tags: tag1, tag2 (array[string])
+ added_at: `2016-02-04T16:44:33+00:00` (string)
+ updated_at: `2016-02-05T16:44:33+00:00` (string)

## CompanyDetail (object)
+ id: `123` (number)
+ name: `Pied Piper` (string)
+ business_type: `NV` (string)
+ vat_number: `BE0899623035` (string)
+ local_business_number: `63326426` (string)
+ email: `info@piedpiper.eu` (string)
+ invoice_email: `invoicing@example.com` (string, optional)
+ phone: `092980615` (string)
+ fax: `091234567` (string)
+ website: `https://piedpiper.com` (string)
+ address (Address)
+ delivery_address (Addressee)
+ visiting_address (Addressee)
+ invoice_address (Addressee)
+ iban: `BE12123412341234` (string)
+ bic: `BICBANK` (string)
+ language: `NL` (string)
+ tags: tag1, tag2 (array[string])
+ remarks: `First contact at expo` (string)
+ added_at: `2016-02-04T16:44:33+00:00` (string)
+ updated_at: `2016-02-05T16:44:33+00:00` (string)

## CompanyType (object)
+ name: `BVBA` (string)

## Contact (object)
+ id: `456` (number)
+ first_name: `Erlich` (string)
+ last_name: `Bachman` (string)
+ salutation: `Mr` (string)
+ email: `info@piedpiper.eu` (string)
+ phone: `092980615` (string)
+ mobile: `0412121212` (string)
+ fax: `091234567` (string)
+ website: `https://piedpiper.com` (string)
+ address (Address)
+ gender: `M` (enum[string])
    + Members
        + M
        + F
        + U
+ birthdate: `1987-04-25` (string)
+ iban: `BE12123412341234` (string)
+ bic: `BICBANK` (string)
+ tags: tag1, tag2 (array[string])
+ language: `EN` (string)
+ added_at: `2016-02-04T16:44:33+00:00` (string)
+ updated_at: `2016-02-05T16:44:33+00:00` (string)

## ContactDetail (object)
+ id: `456` (number)
+ first_name: `Erlich` (string)
+ last_name: `Bachman` (string)
+ salutation: `Mr` (string)
+ email: `info@piedpiper.eu` (string)
+ invoice_email: `invoicing@example.com` (string)
+ phone: `092980615` (string)
+ mobile: `0412121212` (string)
+ fax: `091234567` (string)
+ website: `https://piedpiper.com` (string)
+ address (Address)
+ delivery_address (Addressee)
+ visiting_address (Addressee)
+ invoice_address (Addressee)
+ gender: `M` (enum[string])
    + Members
        + M
        + F
        + U
+ birthdate: `1987-04-25` (string)
+ iban: `BE12123412341234` (string)
+ bic: `BICBANK` (string)
+ tags: tag1, tag2 (array[string])
+ language: `EN` (string)
+ remarks: `First contact at expo` (string)
+ added_at: `2016-02-04T16:44:33+00:00` (string)
+ updated_at: `2016-02-05T16:44:33+00:00` (string)

## CreditNote (object)
+ id: `173111` (number)
+ creditnote_nr: `5` (number)
+ creditnote_nr_detailed: `2017 / 5 (MAIN)` (string)
+ date: `2016-02-04T16:44:33+00:00` (string)
+ date_paid: `2016-02-04T16:44:33+00:00` (string)
+ paid: `true` (boolean)
+ total_price_excl_vat: `123.00` (number)
+ total_price_incl_vat: `130.38` (number)
+ name: `De Rode Duivels` (string)
+ contact_or_company: `company` (string)
+ contact_or_company_id: `485906` (number)
+ related_invoice_id: `173111` (number)

## Deal (object)
+ id: `164938` (number)
+ title: `Interesting deal` (string)
+ for: `contact` (string)
+ for_id: `1176793` (number)
+ customer_name: `John`,
+ probability: `5` (number)
+ phase_id: `5` (number)
+ responsible_user_id: `-1` (number)
+ entry_date: `2017-05-09T11:25:11+00:00` (string)
+ latest_activity_date: `2017-05-09T11:30:58+00:00` (string)
+ close_date: `2017-05-09T11:31:15+00:00` (string)
+ date_lost: `2017-05-09T11:31:30+00:00` (string)
+ reason_refused: `No interest` (string)
+ source_id: `8799` (number)

## DealDetail (object)
+ id: `164938` (number)
+ title: `Interesting deal` (string)
+ for: `contact` (string)
+ for_id: `1176793` (number)
+ customer_name: `John`,
+ quotation_nr: `21` (number)
+ total_price_excl_vat: `0.00` (number)
+ probability: `5` (number)
+ phase_id: `5` (number)
+ responsible_user_id: `-1` (number)
+ entry_date: `2017-05-09T11:25:11+00:00` (string)
+ latest_activity_date: `2017-05-09T11:30:58+00:00` (string)
+ close_date: `2017-05-09T11:31:15+00:00` (string)
+ date_lost: `2017-05-09T11:31:30+00:00` (string)
+ reason_refused: `No interest` (string)
+ source_id: `8799` (number)
+ quotation (Quotation)
+ phase_changes (array[PhaseChange])

## DealPhase (object)
+ deal_id: `1` (number)
+ phase_id: `5` (number)

## Department (object)
id: `1` (number)
name: `Sales` (string)

## Invoice (object)
+ id: `173111` (number)
+ invoice_nr: `5` (number)
+ invoice_nr_detailed: `2017 / 5 (MAIN)` (string)
+ date: `2016-02-04T16:44:33+00:00` (string)
+ due_date: `2016-02-04T16:44:33+00:00` (string)
+ date_paid: `2016-02-04T16:44:33+00:00` (string)
+ paid: `true` (boolean)
+ total_price_excl_vat: `123.00` (number)
+ total_price_incl_vat: `130.38` (number)
+ name: `De Rode Duivels` (string)
+ for_attention_of: `Radja Nainggolan` (string)
+ incasso_recall_costs: `0.00` (number)
+ incasso_interest_amount: `0.00` (number)
+ structured_communication: `+++000/1731/11048+++` (string)
+ contact_or_company: `company` (string)
+ contact_or_company_id: 485906 (number)

## PhaseChange (object)
+ old_phase_id: `1` (number)
+ new_phase_id: `2` (number)
+ change_date: `2017-05-01 12:00:00` (string)
+ changed_by: `5` (number)

## Quotation (object)
+ quotation_nr: `21` (number)
+ total_price_excl_vat: `0.00` (number)
+ items (array[QuotationItem])

## QuotationItem (object)
+ price: `5` (number)
+ amount: `1` (number)
+ vat: `21` (string) - The vat tariff for this line
+ product_id: `1` (number) - ID of the product
+ account: `1` (number) - ID of the bookkeeping account
+ subtitle: `Enable search` (string)

## User (object)
id: `1` (number)
name: `John Smith` (string)
email: `john@teamleader.eu` (string)
gsm: `+32412654321` (string)
phone: `+3291239843` (string)
team_id: `1` (number)
title: `Sales` (string)
active: `true` (boolean)
